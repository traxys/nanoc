use crate::LexerError;
use crate::Token;
use crate::{UndecoratedTree, UndecoratedNode};
use crate::Param;
use crate::{Binding, BindingKind};
use crate::Type;

grammar<'input>(input: &'input str);

extern {
	type Location = usize;
	type Error = LexerError<'input>;

	enum Token<'input> {
		"int" => Token::Int(<i64>),
		"(" => Token::LParen,
		")" => Token::RParen,
		"{" => Token::LBrace,
		"}" => Token::RBrace,
		"," => Token::Comma,
		"->" => Token::Arrow,
		"=" => Token::Equals,
		"id" => Token::Ident(<&'input str>),
		";" => Token::Semicolon,
		"_" => Token::Placeholder,
		"fn" => Token::Function,
		"let" => Token::Let,
		":" => Token::Colon,
		"()" => Token::Unit,
	}
}

pub Statement: UndecoratedTree<'input> = {
	"let" <name:Binding> "=" <expr:Expr> => {
		UndecoratedTree::from_node(UndecoratedNode::Bind {
			name,
			value: Box::new(expr),
		})
	},
	"let" <name:Binding> "=" <expr:ExprList> => {
		UndecoratedTree::from_node(UndecoratedNode::Bind {
			name,
			value: Box::new(expr),
		})
	},
}

pub ExprList: UndecoratedTree<'input> = {
	"{" <statements:(<Statement> ";")*> <expr:Expr> "}" => {
		UndecoratedTree::from_node(UndecoratedNode::List{
			statements: statements,
			expr: Box::new(expr),
		})
	},
};

pub Expr: UndecoratedTree<'input> = {
	"id" => UndecoratedTree::from_node(UndecoratedNode::Ident(<>)),
	"int" => UndecoratedTree::from_node(UndecoratedNode::Int(<>)),
	<lower:LowerExpr> => <>,
	"fn" <id:"id"?> "(" <args:Bindings> ")" "->" <expr:ExprList> => {
	    UndecoratedTree::from_node(UndecoratedNode::FuncDefinition {
        	name: id,
        	bindings: args,
        	body: Box::new(expr),
    	})
	},
};
LowerExpr: UndecoratedTree<'input> = {
	"(" <expr:Expr> ")" => <>,
	<callee:Expr> "(" <args:Args> ")" => {
		crate::desugar_call(callee, args)
	}
};

Bindings = Comma<Binding>;
Binding: Binding<'input> = <id:"id"> ":" <ty:Type> => Binding {
	kind: BindingKind::Named(id),
	ty: Some(ty),
};

Type: Type = {
	"()" => Type::Unit,
	"id" => match <> {
		"int" => Type::Int,
		c => unimplemented!("No custom types possible: {}", c),
	},
	FunctionType => <>,
};
FunctionType: Type =
"(" <inputs:Comma<Type>> ")" "->" <output:Type> => Type::Function {
	inputs,
	output: Box::new(output),
};


Args = Comma<Arg>;
Arg: Param<'input> = {
	"_" => Param::Placeholder,
	<expr:Expr> => Param::Expr(<>),
};

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};
